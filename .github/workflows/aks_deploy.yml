# This is a basic workflow to help you get started with Actions

name: Terraform_deploy_aks

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Login via Azure CLI
      - name: 'Login via Azure CLI'
        uses:  azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'
      - name: 'Get key sp kubernetes'
        run: |
          echo CLIENT_SECRET_AKS=$(az keyvault secret show --vault-name troyskvweu001 --name aks-19-03-2023 --query  value) >> $GITHUB_ENV

      - uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '__'
          tokenSuffix: '__'
          files: '["./aks_deploy/main.tf"]'
        env:
          RG: 'troyrgwest001'
          STA: 'troystawest001'
          CONTAINER: 'tfstate'
          TFSTATE: 'aks.tfstate'

      - uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '__'
          tokenSuffix: '__'
          files: '["./aks_deploy/aksConfig.tfvars"]'
        env:
          CLIENT_ID_AKS: '${{secrets.CLIENT_ID_AKS}}'
          CLIENT_SECRET_AKS: '${{env.CLIENT_SECRET_AKS}}'

      #Run terraform init
      - name: Terraform init
        run: | 
          cd aks_deploy 
          terraform init -no-color  -reconfigure
      - name: Terraform  validate
        run: |
          cd aks_deploy
          terraform validate -no-color 
      - name: Terraform  plan
        run: |
          cd aks_deploy
          terraform plan -no-color  -out='aks.tfstate' -var-file='./aksConfig.tfvars'
      - name: Terraform  apply
        run: |
          cd aks_deploy
          terraform apply -no-color  -auto-approve -var-file='./aksConfig.tfvars'
      - name: Terraform  destroy
        run: |
          cd aks_deploy
          terraform destroy -no-color  -auto-approve -var-file='./aksConfig.tfvars'
